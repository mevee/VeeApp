// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.vee;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;

public final class ApiModule_ProvideHttpCacheFactory implements Factory<Cache> {
  private final ApiModule module;

  private final Provider<Application> applicationProvider;

  public ApiModule_ProvideHttpCacheFactory(
      ApiModule module, Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public Cache get() {
    return Preconditions.checkNotNull(
        module.provideHttpCache(applicationProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Cache> create(ApiModule module, Provider<Application> applicationProvider) {
    return new ApiModule_ProvideHttpCacheFactory(module, applicationProvider);
  }

  public static Cache proxyProvideHttpCache(ApiModule instance, Application application) {
    return instance.provideHttpCache(application);
  }
}
