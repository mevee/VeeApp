// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.vee;

import android.app.Application;
import com.google.gson.Gson;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerApiComponent implements ApiComponent {
  private Provider<Gson> providesGsonProvider;

  private Provider<Application> getApllicationProvider;

  private Provider<Cache> provideHttpCacheProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRestrofitProvider;

  private DaggerApiComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providesGsonProvider =
        DoubleCheck.provider(ApiModule_ProvidesGsonFactory.create(builder.apiModule));
    this.getApllicationProvider =
        DoubleCheck.provider(AppModule_GetApllicationFactory.create(builder.appModule));
    this.provideHttpCacheProvider =
        DoubleCheck.provider(
            ApiModule_ProvideHttpCacheFactory.create(builder.apiModule, getApllicationProvider));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            ApiModule_ProvideOkHttpClientFactory.create(
                builder.apiModule, provideHttpCacheProvider));
    this.provideRestrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRestrofitFactory.create(
                builder.apiModule, providesGsonProvider, provideOkHttpClientProvider));
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectRetrofit(instance, provideRestrofitProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApiModule apiModule;

    private AppModule appModule;

    private Builder() {}

    public ApiComponent build() {
      if (apiModule == null) {
        throw new IllegalStateException(ApiModule.class.getCanonicalName() + " must be set");
      }
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerApiComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }
  }
}
